package stringExp;

import java.util.*;
import java.util.Map.Entry;

public class StringProgram {

	static{
		
    	System.out.println("Inside static block");
    	
	}
	{
		System.out.println("Inside anonomiuys  block");
	}
	
	
	public static int slowLength(String myString) {
	    int i = 0;
	    try {
	        while (true) {
	            myString.charAt(i);
	            i++;
	        }
	      
	    } catch (ArithmeticException e) {
	    	System.out.println("Inside catch block");
	    	return i;
	    }
	    catch(IndexOutOfBoundsException e)
	    {
	    	System.out.println("Inside catch block");
	    	return i;
	    }
	    catch(Throwable e)
	    {
	    	System.out.println("Inside catch block");
	    	return i;
	    }
	    finally{
	    	System.out.println("Inside finally bolck");
	    }
	    
	}
	public static void firstNonRepeatativeCharacter(String str)
	{
	 
		char[] ch=str.toCharArray();
		
		Map hm=new LinkedHashMap<>();
		
		Set set=new HashSet();		
		
		
		for(int i=0; i<ch.length; i++)
		{
			if(!set.add(ch[i]))
			{
				if (hm.get(ch[i]) == null) {
					hm.put(ch[i], 2);
			}
		 }
			else {
				int frequency_counter = (int) hm.get(ch[i]);
				hm.put(ch[i], (Integer) (frequency_counter + 1));
			}
					
		}
		
		 Set<Entry>entrySet=hm.entrySet();
		 Iterator it=entrySet.iterator();
		 boolean flag=true;
		 int i=0;
		 while(it.hasNext()&& flag)
		 {
			 i++;
			Entry e=(Entry) it.next();
			 if((Integer)(e.getValue())==1)
			 {
				 flag=false;
				 System.out.println("the first non repatative character is :"+ e.getKey()+"index :" +i);
			 }
			 
			 
		 }
		
		
	}
	
	
	
	public static void stringReverse(String str)
	{
		char[] charArray=str.toCharArray();
		int length=charArray.length;
		int start=0;
		int end=length-1;
		while(start<end)
		{
			char temp=charArray[start];
			charArray[start]=charArray[end];
			charArray[end]=temp;
			
			start++;
			end--;
		}
				
	System.out.println("reverse String is :" );
	for(int j=0; j<length; j++)
	{
		System.out.print(charArray[j]);
	}
	
	}
	public static int convert_String_To_Number(String numStr){
        
        char ch[] = numStr.toCharArray();
        int sum = 0;
        //get ascii value for zero
        int zeroAscii = (int)'0';
        System.out.println(zeroAscii);
        for(char c:ch){
            int tmpAscii = (int)c;
            System.out.print(tmpAscii +" -");
            System.out.print(" [" +(tmpAscii-zeroAscii) + "]"+" -");
            sum = (sum*10)+(tmpAscii-zeroAscii);
        }
        return sum;
    }

	public void DuplicatesInString() {
		
		String str1 = "British intelligence services have foiled seven terror attacks in the past six months in the United Kingdom while earlier response to such warning . had originated from the al-Qaeda and the area between Pakistan and Afghanistan, British Prime Minister";
		String[] stringArray = str1.split(" ");

		HashMap<String, Integer> hm = new HashMap<String, Integer>();
		Set duplicatesset = new HashSet();

		for (int i = 0; i < stringArray.length; i++) {
			if (!duplicatesset.add(stringArray[i])) {
				if (hm.get(stringArray[i]) == null) {
					hm.put(stringArray[i], 2);
				}
				else {
					int frequency_counter = hm.get(stringArray[i]);
					hm.put(stringArray[i], (Integer) (frequency_counter + 1));

				}
			}

		}

		for (Map.Entry m : hm.entrySet()) {
			System.out.println(m.getKey() + " " + m.getValue());
		}

	}

	static void frequenceyConatins(String tarStr, String mainStr)
	{
		
		char[] tarC=tarStr.toCharArray();
		char[] marC=mainStr.toCharArray();
		
		int counter=0;
		int k=0;
		if(tarC.length<marC.length)
		{
			for(int i=0; i<marC.length; i++)
			{
				
				if (tarC[0] == marC[i]) {
					boolean flag = true;
					int j = 1;
					k = i + 1;
					while (flag && j < (tarC.length - 1)) {
						if (tarC[j] == marC[k]) {
							j++;
							k++;
						} else {
							flag = false;
						}
					}
					if (flag == true) {
						counter = counter + 1;
					}
					i=k;
				}
				
				
								
			}
			
			System.out.println("The frequency of that tarGet charactersequnce is "+ counter);
		}	
		else{
			
			System.out.println("target Character sequence is bigger that main String");
			
		}
		
		
	}
	
	
	void contains() {

		String st1 = "This world is beautiful. Its depends on individuals how u see that";
		String st2 = "ful.";

		char[] charArray_s = st1.toCharArray();

		char[] charArray_t = st2.toCharArray();

		int len = charArray_s.length - 1;

		if (len >= charArray_t.length) {
			for (int i = 0; i <= len; i++) {
				// System.out.println(charArray_s[i]);
				if ((charArray_s[i] == charArray_t[0])
						&& (charArray_t.length - 1 <= (len - i))) {
					boolean flag = true;
					int j = 1;
					int k = i+1;

					while (flag && j <= charArray_t.length - 2 ) {
						if (charArray_s[k] != charArray_t[j]) {
							flag = false;

						} else {
							j++;
							k++;
						}

					}
					if (flag == true) {
						System.out
								.println("yes, The traget character Sequence is present in String");
						System.out
								.println("Index of matched character_sequence start at :"
										+ i);
						break;

					} else {
						System.out
								.println("That character sequnce is not present");
					}

				}

			}
		} else {
			System.out
					.println("That character sequnce is not present: Because the target character sequnce is getter than the source Character sequnce");
		}

	}
	
		
		
		
	
	
	
	
	
	
	public static void main(String[] args) {
		
		String str="You can use a loop to check every character position"
				+ " and"
				+ " catch the IndexOutOfBoundsException when you pass the last character";
		
		
		System.out.println("The length of the string is ::" + StringProgram.slowLength(str) );
		
		
		System.out.println("*******************************************************");
		
		StringProgram.stringReverse(str);
		
		String str1="Oracle India : , Informatica, Morgan Stanley.";
		
		String[] str2=str1.split("");
		System.out.println("");
		/*for(String str3:str2)
		{
			
			System.out.print(str3);
		}*/
		String str44=String.valueOf(str1.charAt(0));
		System.out.println(str2[12].equals(" ") );
		System.out.println(str2[15]);
		str1.contains("jgjd");
		StringProgram stp=new StringProgram();
		stp.contains( );
		stp.DuplicatesInString();
		
		String mainStr="abcbbbabc";
		String tarGetStr="abc";
		
		frequenceyConatins(tarGetStr,mainStr);
		
		
		
	}
}
