package linkedlist;

public class MeargeSortOnLinkedList {

	public static void main(String[] args) {

		LinkedListM lm = new LinkedListM();
		lm.insert(14);
		lm.insert(65);
		lm.insert(50);
		lm.insert(40);
		lm.insert(60);

	}
}

class LinkedListM {

	Node head;

	static class Node {

		int data;
		Node next;

		Node(int data) {
			this.data = data;
			next = null;
		}

	}

	void insert(int data) {
		if (head == null) {
			head = new Node(data);

		} else {
			Node temp = new Node(data);
			head.next = temp;

		}
	}

	static Node meargeSort(LinkedListM.Node node) {

		if (node == null || node.next == null) {
			return node;
		} else {

			Node firstOfMiddle = node;
			Node middle = findMiddle(node);
			Node nextOfMiddle = middle.next;
			middle.next=null;
			
			meargeSort(firstOfMiddle);
			meargeSort(nextOfMiddle);
			meargeList();

		}

	}

	static Node findMiddle(Node node) {
		if (node == null || node.next == null) {
			return node;
		} else {
			Node middle = node;
			Node current = node;
			int length = 0;
			while (current.next != null) {
				length++;
				if (length % 2 == 0) {
					middle = middle.next;
				}
				current = current.next;
			}

			if (length % 2 == 1) {
				middle = middle.next;
			}

			return middle;

		}

	}

	Node meargeList(Node leftNode, Node rightNode) {

		if(leftNode==null)
		{
			return rightNode;
		}
		if(rightNode==null)
		{
			return leftNode;
		}
		Node temp=null;
		if(leftNode.data<rightNode.data)
		{
			temp=leftNode;
			temp.next=meargeList(leftNode.next,rightNode);
			
		}
		if(leftNode.data>rightNode.data)
		{
			temp=rightNode;
			temp.next=meargeList(leftNode,rightNode.next);
		}
		
		return temp;
	}

}