package linkedlist;

public class MeargeSortOnLinkedList {


	
	public static void main(String[] args) {
		
		LinkedListM lm=new LinkedListM();
		lm.insert(14);
		lm.insert(65);
		lm.insert(50);
		lm.insert(40);
		lm.insert(60);
		
	}
}

class LinkedListM {

	Node head;
	static class Node {

		int data;
		Node next;

		
		Node(int data)
		{
			this.data=data;
			next=null;
		}
		
		
				
	}
	
	void insert(int data)
	{
		if(head==null)
		{
			head=new Node(data);
			
		}
		else
		{
			Node temp=new Node(data);
			head.next=temp;
			
		}
	}
	
	static void meargeSort(LinkedListM list)
	{
	
		
	}
	static Node findMiddle(LinkedListM list)
	{
		if(list.head==null|| list.head.next==null)
		{
			return list.head;
		}
		else
		{
			Node slow,fast;
			slow=fast=list.head;
			while(slow != null && fast != null && fast.next != null)
			{
				slow=slow.next;
				fast=fast.next.next;
				
			}
			Node middle = list.head;
		    Node current=list.head;
			int length=0;
		      while(current.next != null){
		          length++;
		          if(length%2 ==0){
		              middle = middle.next;
		          }
		          current = current.next;
		      }
		    
		      if(length%2 == 1){
		          middle = middle.next;
		      }

			
		}
		return 
	}
	LinkedListM meargeList(LinkedListM list1, LinkedListM list2)
	{
		
		
		return  list1;
	}


}